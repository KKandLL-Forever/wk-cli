#!/usr/bin/env node
"use strict";var inquirer=require("inquirer"),fs=require("fs"),path=require("path"),superagent=require("superagent");require("download-git-repo"),require("adm-zip");var ora=require("ora"),commander=require("commander");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var inquirer__default=_interopDefaultLegacy(inquirer),fs__default=_interopDefaultLegacy(fs),path__default=_interopDefaultLegacy(path),superagent__default=_interopDefaultLegacy(superagent),ora__default=_interopDefaultLegacy(ora),RepositoryList={"react@17":"direct:https://github.com/KKandLL-Forever/react-template/archive/refs/heads/master.zip","vue3+pinia+router":"direct:https://github.com/KKandLL-Forever/react-template/archive/refs/heads/master.zip","react17+vite+unocss+ts":"direct:https://github.com/KKandLL-Forever/react-template/archive/refs/heads/master.zip"};const IS_PRODUCTION="production"===process.env.NODE_ENV,DEV_LAYER=IS_PRODUCTION?__dirname:path__default.default.resolve(__dirname,"..",".."),SAVE_PATH=path__default.default.resolve(DEV_LAYER,"local"),FILE_NAME="repository.json",SAVE_FILE_NAME=path__default.default.resolve(SAVE_PATH,FILE_NAME);async function saveLocalRepository(e,t,r=!1,a,s){initFile();const i=getRepositoryData();return!i[e]&&(i[e]=`https://${r?`${a}:${s}@`:""}${t.replace(/http(s)?:\/?\/?/,"")}`,!!await checkRepositoryIsExists(i[e])&&(fs__default.default.writeFileSync(SAVE_FILE_NAME,JSON.stringify(i),{encoding:"utf-8"}),!0))}function getRepositoryData(){return fs__default.default.existsSync(SAVE_FILE_NAME)?require(SAVE_FILE_NAME):{}}function initFile(){return fs__default.default.existsSync(SAVE_PATH)||fs__default.default.mkdirSync(SAVE_PATH),fs__default.default.existsSync(SAVE_FILE_NAME)||fs__default.default.writeFileSync(SAVE_FILE_NAME,"{}",{encoding:"utf-8"}),!0}async function checkRepositoryIsExists(e){try{return await superagent__default.default.get(e),!0}catch(e){return console.log(e),!1}}Object.keys(Object.assign(RepositoryList,getRepositoryData(),{custom:""}));const SAFE_INQUIRER_LIST=[{type:"input",message:"input your template name",name:"templateName"},{type:"list",message:"choose your repository type",name:"repositoryType",choices:["public","private"]},{type:"input",message:"input your repository url",name:"repositoryUrl"},{type:"input",when({repositoryType:e}){return"private"===e},name:"repositoryUser",message:"input your git username"},{type:"password",when({repositoryType:e}){return"private"===e},name:"repositoryPass",message:"input your git password"}];async function handleSafeRepository(e){const t=ora__default.default("start download template").start();try{var{templateName:r,repositoryType:a,repositoryPass:s,repositoryUser:i,repositoryUrl:o}=e;await saveLocalRepository(r,o,"private"===a,i,s)?t.succeed("save template success"):t.fail("save fail")}catch(e){console.log(e),t.fail("save fail")}}function createCommand(){const e=new commander.Command;return e.version("0.1.1"),e.addHelpText("after","test"),e.parse(process.argv),e}function entry(){inquirer__default.default.prompt(SAFE_INQUIRER_LIST).then(async e=>{handleSafeRepository(e)})}createCommand(),entry();
